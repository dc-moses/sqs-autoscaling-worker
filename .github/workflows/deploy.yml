name: Deploy SQS Worker

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      LAMBDA_NAME: sqs-worker-lambda

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-ci-role
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install boto3

      - name: Discover default subnet and write to env
        id: subnet
        run: |
          SUBNET_ID=$(aws ec2 describe-subnets --filters Name=default-for-az,Values=true --query "Subnets[0].SubnetId" --output text)
          echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_ENV
          echo "Discovered subnet: $SUBNET_ID"

      - name: Deploy CloudFormation stack and Lambda
        run: |
          set +e
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          python3 deploy.py
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "‚ö†Ô∏è Deployment failed. Capturing logs..."
            aws cloudformation describe-stack-events --stack-name SQSWorkerStack \
              --query "StackEvents[?ResourceStatus=='ROLLBACK_COMPLETE'].[LogicalResourceId,ResourceStatusReason]" \
              --output table || echo "‚ö†Ô∏è Failed to fetch stack events."
          fi
          exit $STATUS

      - name: Deploy API Gateway
        run: |
          sed -i "s/YourLambdaFunctionName/$LAMBDA_NAME/g" deploy_api_gateway.py
          python3 deploy_api_gateway.py

      - name: Send test job to SQS
        run: |
          QUEUE_URL=$(aws cloudformation describe-stacks \
            --stack-name SQSWorkerStack \
            --query "Stacks[0].Outputs[?OutputKey=='SQSQueueURL'].OutputValue" \
            --output text)
          echo "Sending test job to queue: $QUEUE_URL"
          aws sqs send-message --queue-url "$QUEUE_URL" --message-body '{"wait_seconds":10}'

      - name: Wait for job completion and ASG scale-down
        run: |
          echo "‚è≥ Waiting for message in SQS..."
          QUEUE_URL=$(aws cloudformation describe-stacks \
            --stack-name SQSWorkerStack \
            --query "Stacks[0].Outputs[?OutputKey=='SQSQueueURL'].OutputValue" \
            --output text)

          for i in {1..10}; do
            COUNT=$(aws sqs get-queue-attributes \
              --queue-url "$QUEUE_URL" \
              --attribute-names ApproximateNumberOfMessages \
              --query "Attributes.ApproximateNumberOfMessages" \
              --output text)
            echo "Poll $i: $COUNT message(s) visible"
            if [ "$COUNT" -ge 1 ]; then break; fi
            if [ "$i" -eq 10 ]; then echo "‚ùå Message did not appear."; exit 1; fi
            sleep 10
          done

          ASG_NAME=$(aws cloudformation describe-stack-resources \
            --stack-name SQSWorkerStack \
            --query "StackResources[?ResourceType=='AWS::AutoScaling::AutoScalingGroup'].PhysicalResourceId" \
            --output text)

          echo "‚è≥ Waiting for ASG scale-down after job execution..."
          for i in {1..40}; do
            INSTANCE_COUNT=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names "$ASG_NAME" \
              --query "length(AutoScalingGroups[0].Instances)" \
              --output text)

            echo "Poll $i: $INSTANCE_COUNT instance(s)"
            if [ "$INSTANCE_COUNT" -eq 0 ]; then
              echo "‚úÖ ASG scaled down. Job complete."
              break
            fi
            sleep 30
          done

      - name: Cleanup CloudFormation stack and S3 buckets
        if: always()
        run: |
          echo "üßπ Cleaning up CloudFormation stack and all S3 buckets..."
          aws cloudformation delete-stack --stack-name SQSWorkerStack || true
          aws cloudformation wait stack-delete-complete --stack-name SQSWorkerStack || echo "‚ö†Ô∏è Stack deletion waiter timed out"

          BUCKET_NAMES=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, 'worker-bucket-')].Name" --output text)
          if [ -z "$BUCKET_NAMES" ]; then
            echo "No matching worker buckets found."
          else
            for BUCKET in $BUCKET_NAMES; do
              echo "üßπ Deleting bucket: $BUCKET"
              aws s3 rm s3://$BUCKET --recursive || true
              aws s3api delete-bucket --bucket $BUCKET || true
              echo "‚úÖ Bucket $BUCKET deleted."
            done
          fi