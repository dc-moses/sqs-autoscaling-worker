name: Deploy SQS Worker

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      LAMBDA_NAME: sqs-worker-lambda

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-ci-role
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install boto3

      - name: Discover default subnet and write to env
        id: subnet
        run: |
          SUBNET_ID=$(aws ec2 describe-subnets --filters Name=default-for-az,Values=true --query "Subnets[0].SubnetId" --output text)
          echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_ENV
          echo "Discovered subnet: $SUBNET_ID"

      - name: Deploy CloudFormation stack and Lambda
        run: |
          set +e
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          python3 deploy.py
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "‚ö†Ô∏è Deployment failed. Capturing logs..."
            aws cloudformation describe-stack-events --stack-name SQSWorkerStack \
              --query "StackEvents[?ResourceStatus=='ROLLBACK_COMPLETE'].[LogicalResourceId,ResourceStatusReason]" \
              --output table || echo "‚ö†Ô∏è Failed to fetch stack events."
          fi
          exit $STATUS

      - name: Deploy API Gateway
        run: |
          sed -i "s/YourLambdaFunctionName/$LAMBDA_NAME/g" deploy_api_gateway.py
          python3 deploy_api_gateway.py

      - name: Send test job to SQS
        run: |
          QUEUE_URL=$(aws cloudformation describe-stacks \
            --stack-name SQSWorkerStack \
            --query "Stacks[0].Outputs[?OutputKey=='SQSQueueURL'].OutputValue" \
            --output text)
          echo "Sending test job to queue: $QUEUE_URL"
          aws sqs send-message --queue-url "$QUEUE_URL" --message-body '{"wait_seconds":10}'

      - name: Wait for message to appear in SQS queue
        run: |
          echo "‚è≥ Waiting for message to appear in SQS queue..."
          QUEUE_URL=$(aws cloudformation describe-stacks \
            --stack-name SQSWorkerStack \
            --query "Stacks[0].Outputs[?OutputKey=='SQSQueueURL'].OutputValue" \
            --output text)

          for i in {1..10}; do
            COUNT=$(aws sqs get-queue-attributes \
              --queue-url "$QUEUE_URL" \
              --attribute-names ApproximateNumberOfMessages \
              --query "Attributes.ApproximateNumberOfMessages" \
              --output text)

            echo "Poll $i: Queue has $COUNT visible message(s)"
            if [ "$COUNT" -ge 1 ]; then
              echo "‚úÖ Message detected."
              break
            fi

            if [ "$i" -eq 10 ]; then
              echo "‚ùå No message detected after waiting. Failing the job."
              exit 1
            fi
            sleep 10
          done

      - name: Wait for ASG scale-up and EC2 readiness
        run: |
          ASG_NAME=$(aws cloudformation describe-stack-resources \
            --stack-name SQSWorkerStack \
            --query "StackResources[?ResourceType=='AWS::AutoScaling::AutoScalingGroup'].PhysicalResourceId" \
            --output text)

          echo "üîç Waiting for ASG to scale up and launch an instance..."

          INSTANCE_ID=""
          for i in {1..40}; do
            INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names "$ASG_NAME" \
              --query "AutoScalingGroups[0].Instances[0].InstanceId" \
              --output text)

            if [ "$INSTANCE_ID" != "None" ] && [ -n "$INSTANCE_ID" ]; then
              echo "‚úÖ Found instance ID: $INSTANCE_ID"
              break
            fi

            echo "üîÑ Poll $i: No instance yet. Waiting..."
            sleep 10
          done

          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" == "None" ]; then
            echo "‚ùå No instance launched after waiting. Exiting."
            exit 1
          fi

          echo "üîç Waiting for EC2 instance to be in 'running' state..."

          for i in {1..40}; do
            STATE=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" \
              --query "Reservations[0].Instances[0].State.Name" --output text)

            echo "Poll $i: Instance $INSTANCE_ID state: $STATE"
            if [ "$STATE" == "running" ]; then
              echo "‚úÖ Instance is running."
              break
            fi
            sleep 10
          done

          echo "üîç Waiting for EC2 health checks to pass..."

          for j in {1..20}; do
            STATUS=$(aws ec2 describe-instance-status \
              --instance-ids "$INSTANCE_ID" \
              --query "InstanceStatuses[0].InstanceStatus.Status" \
              --output text)

            echo "Health poll $j: Instance status is $STATUS"
            if [ "$STATUS" == "ok" ]; then
              echo "‚úÖ Instance is healthy."
              break
            fi
            sleep 10
          done

      - name: Confirm EC2 processed SQS job via SSM
        run: |
          echo "üîç Checking for job completion via SSM..."

          ASG_NAME=$(aws cloudformation describe-stack-resources \
            --stack-name SQSWorkerStack \
            --query "StackResources[?ResourceType=='AWS::AutoScaling::AutoScalingGroup'].PhysicalResourceId" \
            --output text)

          INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ASG_NAME" \
            --query "AutoScalingGroups[0].Instances[0].InstanceId" \
            --output text)

          if [ "$INSTANCE_ID" == "None" ] || [ -z "$INSTANCE_ID" ]; then
            echo "‚ùå Could not retrieve instance ID."
            exit 1
          fi

          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Check if job was processed" \
            --parameters commands="cat /var/log/worker.log" \
            --query "Command.CommandId" \
            --output text)

          for i in {1..20}; do
            STATUS=$(aws ssm get-command-invocation \
              --instance-id "$INSTANCE_ID" \
              --command-id "$COMMAND_ID" \
              --query "Status" --output text)

            echo "Poll $i: SSM status is $STATUS"

            if [ "$STATUS" == "Success" ]; then
              OUTPUT=$(aws ssm get-command-invocation \
                --instance-id "$INSTANCE_ID" \
                --command-id "$COMMAND_ID" \
                --query "StandardOutputContent" --output text)

              echo "$OUTPUT"

              if echo "$OUTPUT" | grep -q "\[Worker\] Done."; then
                echo "‚úÖ Confirmed: EC2 processed the SQS job."
                break
              else
                echo "‚ùå Job log did not confirm processing."
                exit 1
              fi
            fi
            sleep 10
          done

      - name: Wait for ASG to scale down
        run: |
          ASG_NAME=$(aws cloudformation describe-stack-resources \
            --stack-name SQSWorkerStack \
            --query "StackResources[?ResourceType=='AWS::AutoScaling::AutoScalingGroup'].PhysicalResourceId" \
            --output text)

          echo "Waiting for ASG to scale down to 0..."
          for i in {1..40}; do
            INSTANCE_COUNT=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names "$ASG_NAME" \
              --query "length(AutoScalingGroups[0].Instances)" \
              --output text)

            echo "Poll $i: Current instance count = $INSTANCE_COUNT"
            if [ "$INSTANCE_COUNT" -eq 0 ]; then
              echo "‚úÖ EC2 instance has terminated and ASG scaled down to 0."
              break
            fi
            sleep 30
          done

      - name: Cleanup CloudFormation stack and S3 buckets
        if: always()
        run: |
          echo "üßπ Cleaning up CloudFormation stack and all S3 buckets..."
          aws cloudformation delete-stack --stack-name SQSWorkerStack || true
          aws cloudformation wait stack-delete-complete --stack-name SQSWorkerStack || echo "‚ö†Ô∏è Stack deletion waiter timed out"

          BUCKET_NAMES=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, 'worker-bucket-')].Name" --output text)
          if [ -z "$BUCKET_NAMES" ]; then
            echo "No matching worker buckets found."
          else
            for BUCKET in $BUCKET_NAMES; do
              echo "üßπ Deleting bucket: $BUCKET"
              aws s3 rm s3://$BUCKET --recursive || true
              aws s3api delete-bucket --bucket $BUCKET || true
              echo "‚úÖ Bucket $BUCKET deleted."
            done
          fi