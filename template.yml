AWSTemplateFormatVersion: '2010-09-09'
Description: SQS Worker Stack with Lambda-based ASG auto-scaling

Parameters:
  WorkerScriptBucket:
    Type: String
  WorkerScriptKey:
    Type: String
  SubnetId:
    Type: AWS::EC2::Subnet::Id

Resources:
  WorkerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: worker-queue

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId:
          Fn::Sub: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
        InstanceType: t2.micro
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install -y python3 aws-cli
            aws s3 cp s3://${WorkerScriptBucket}/${WorkerScriptKey} /home/ec2-user/worker.py
            python3 /home/ec2-user/worker.py

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 0
      VPCZoneIdentifier:
        - !Ref SubnetId

  ASGScalerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ASGScalerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ASGScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:DescribeAutoScalingGroups
                  - sqs:GetQueueAttributes
                Resource: "*"
              - Effect: Allow
                Action: logs:*
                Resource: "*"

  ASGScalerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ASGScalerFunction
      Handler: index.lambda_handler
      Role: !GetAtt ASGScalerFunctionRole.Arn
      Runtime: python3.10
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import os

          def lambda_handler(event, context):
              sqs = boto3.client('sqs')
              asg = boto3.client('autoscaling')
              queue_url = os.environ['QUEUE_URL']
              asg_name = os.environ['ASG_NAME']

              attrs = sqs.get_queue_attributes(
                  QueueUrl=queue_url,
                  AttributeNames=['ApproximateNumberOfMessages']
              )
              message_count = int(attrs['Attributes']['ApproximateNumberOfMessages'])

              group = asg.describe_auto_scaling_groups(
                  AutoScalingGroupNames=[asg_name]
              )['AutoScalingGroups'][0]

              current = group['DesiredCapacity']

              if message_count > 0 and current == 0:
                  asg.set_desired_capacity(AutoScalingGroupName=asg_name, DesiredCapacity=1, HonorCooldown=False)
              elif message_count == 0 and current > 0:
                  asg.set_desired_capacity(AutoScalingGroupName=asg_name, DesiredCapacity=0, HonorCooldown=False)

              return {
                  'statusCode': 200,
                  'body': f'Messages: {message_count}, CurrentCapacity: {current}'
              }
      Environment:
        Variables:
          QUEUE_URL: !Ref WorkerQueue
          ASG_NAME: !Ref AutoScalingGroup

  ASGScalerSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 minute)
      Targets:
        - Arn: !GetAtt ASGScalerFunction.Arn
          Id: ASGScalerTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ASGScalerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ASGScalerSchedule.Arn

Outputs:
  SQSQueueURL:
    Value: !Ref WorkerQueue
    Export:
      Name: !Sub "${AWS::StackName}-QueueURL"

  LaunchTemplateId:
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-LaunchTemplateId"

  AutoScalingGroupName:
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-ASGName"