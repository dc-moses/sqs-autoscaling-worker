AWSTemplateFormatVersion: '2010-09-09'
Description: SQS Worker Stack with Lambda-based ASG auto-scaling

Parameters:
  WorkerScriptBucket:
    Type: String
  WorkerScriptKey:
    Type: String
  SubnetId:
    Type: AWS::EC2::Subnet::Id

Resources:
  WorkerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: worker-queue
      VisibilityTimeout: 90

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2WorkerInstanceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: SQSPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt WorkerQueue.Arn

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId:
          Fn::Sub: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
        InstanceType: t2.micro
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "[UserData] Bootstrapping instance..." >> /var/log/worker.log

            # Set region explicitly for boto3 to avoid NoRegionError
            echo "export AWS_DEFAULT_REGION=us-east-1" >> /etc/profile.d/aws_region.sh
            export AWS_DEFAULT_REGION=us-east-1

            yum install -y python3 aws-cli >> /var/log/worker.log 2>&1
            pip3 install boto3 >> /var/log/worker.log 2>&1

            aws s3 cp s3://${WorkerScriptBucket}/${WorkerScriptKey} /home/ec2-user/worker.py >> /var/log/worker.log 2>&1
            chmod +x /home/ec2-user/worker.py

            QUEUE_URL="${WorkerQueue}"
            echo "[UserData] Starting worker.py with QUEUE_URL=${WorkerQueue}" >> /var/log/worker.log
            nohup python3 /home/ec2-user/worker.py "${WorkerQueue}" >> /var/log/worker.log 2>&1 &

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 0
      VPCZoneIdentifier:
        - !Ref SubnetId

  ASGScalerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ASGScalerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ASGScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:DescribeAutoScalingGroups
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                  - ssm:ListCommandInvocations
                  - ssm:GetParameter
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ASGScalerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ASGScalerFunction
      Handler: lambda_trigger.lambda_handler
      Role: !GetAtt ASGScalerFunctionRole.Arn
      Runtime: python3.10
      Timeout: 300
      MemorySize: 128
      Code:
        ZipFile: |
          # will be replaced by real code in deploy.py
          def lambda_handler(event, context): pass
      Environment:
        Variables:
          QUEUE_URL: !Ref WorkerQueue
          ASG_NAME: !Ref AutoScalingGroup

  ASGScalerSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: ASGScalerSchedule
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ASGScalerFunction.Arn
          Id: ASGScalerTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ASGScalerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ASGScalerSchedule.Arn

Outputs:
  SQSQueueURL:
    Value: !Ref WorkerQueue
    Export:
      Name: !Sub "${AWS::StackName}-QueueURL"

  LaunchTemplateId:
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-LaunchTemplateId"

  AutoScalingGroupName:
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-ASGName"