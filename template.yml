AWSTemplateFormatVersion: '2010-09-09'
Description: SQS Worker Stack with Lambda-based ASG auto-scaling

Parameters:
  WorkerScriptBucket:
    Type: String
  WorkerScriptKey:
    Type: String
  SubnetId:
    Type: AWS::EC2::Subnet::Id

Resources:
  WorkerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: worker-queue

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
        InstanceType: t2.micro
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install -y python3 awscli
            QUEUE_URL="${WorkerQueue}"
            echo "QUEUE_URL=${WorkerQueue}" >> /etc/environment
            aws s3 cp s3://${WorkerScriptBucket}/${WorkerScriptKey} /home/ec2-user/worker.py
            python3 /home/ec2-user/worker.py

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 0
      Cooldown: 30
      VPCZoneIdentifier:
        - !Ref SubnetId

  ASGScalerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ASGScalerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ASGScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:DescribeAutoScalingGroups
                  - sqs:GetQueueAttributes
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ASGScalerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ASGScalerFunction
      Handler: lambda_trigger.lambda_handler
      Role: !GetAtt ASGScalerFunctionRole.Arn
      Runtime: python3.10
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import os
          import time
          import botocore.exceptions

          sqs = boto3.client("sqs")
          asg = boto3.client("autoscaling")

          def lambda_handler(event, context):
              queue_url = os.environ.get("QUEUE_URL")
              asg_name = os.environ.get("ASG_NAME")

              if not queue_url or not asg_name:
                  print("[ERROR] Missing QUEUE_URL or ASG_NAME in environment variables.")
                  return {"statusCode": 500}

              attrs = sqs.get_queue_attributes(
                  QueueUrl=queue_url,
                  AttributeNames=["ApproximateNumberOfMessages", "ApproximateNumberOfMessagesNotVisible"]
              )
              visible = int(attrs["Attributes"].get("ApproximateNumberOfMessages", 0))
              not_visible = int(attrs["Attributes"].get("ApproximateNumberOfMessagesNotVisible", 0))
              total = visible + not_visible
              print(f"[SQS] Visible: {visible}, In-flight: {not_visible}, Total: {total}")

              group = asg.describe_auto_scaling_groups(AutoScalingGroupNames=[asg_name])["AutoScalingGroups"][0]
              current_capacity = group["DesiredCapacity"]
              print(f"[ASG] Current desired capacity: {current_capacity}")

              if total > 0 and current_capacity == 0:
                  print(f"[ASG] Scaling UP {asg_name} to 1")
                  asg.set_desired_capacity(AutoScalingGroupName=asg_name, DesiredCapacity=1, HonorCooldown=False)
              elif total == 0 and current_capacity > 0:
                  print(f"[ASG] Attempting to scale DOWN {asg_name} to 0")
                  for attempt in range(3):
                      try:
                          asg.set_desired_capacity(AutoScalingGroupName=asg_name, DesiredCapacity=0, HonorCooldown=False)
                          print(f"[ASG] Scale-down request successful on attempt {attempt + 1}")
                          break
                      except botocore.exceptions.ClientError as e:
                          print(f"[ASG] Attempt {attempt + 1} failed: {e}")
                          if attempt < 2:
                              time.sleep(5)
                          else:
                              print("[ASG] All scale-down attempts failed.")

              return {
                  "statusCode": 200,
                  "body": f"QueueTotal={total}, DesiredCapacity={current_capacity}"
              }
      Environment:
        Variables:
          QUEUE_URL: !Ref WorkerQueue
          ASG_NAME: !Ref AutoScalingGroup

  ASGScalerSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 minute)
      Targets:
        - Arn: !GetAtt ASGScalerFunction.Arn
          Id: TargetFunctionV1

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ASGScalerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ASGScalerSchedule.Arn

Outputs:
  SQSQueueURL:
    Value: !Ref WorkerQueue
    Export:
      Name: !Sub "${AWS::StackName}-QueueURL"

  LaunchTemplateId:
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-LaunchTemplateId"

  AutoScalingGroupName:
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-ASGName"